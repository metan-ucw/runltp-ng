#!/usr/bin/env perl
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (c) 2017-2021 Cyril Hrubis <chrubis@suse.cz>
#
# Linux Test Project test runner

use strict;
use warnings;
use Getopt::Long;

use lib './';
use log;
use backend;
use utils;
use results;
use install_pkg;

my $backend_opts = "sh";
my $help = '';
my $logname = "log";
my $sysinfo;
my $verbose;
my $list;
my $run;
my $interactive;
my $exclude;
my $include;
my $ltpdir = '/opt/ltp';
my $install;
my $repouri;
my $setup;
my $cmd;
my $m32;
my $timeout = 334;
my $json_filter;

GetOptions(
	"backend=s" => \$backend_opts,
	"help" => \$help,
	"logname=s" => \$logname,
	"sysinfo" => \$sysinfo,
	"list" => \$list,
	"run=s" => \$run,
	"interactive" => \$interactive,
	"exclude=s" => \$exclude,
	"include=s" => \$include,
	"ltpdir=s" => \$ltpdir,
	"install=s" => \$install,
	"repouri=s" => \$repouri,
	"m32" => \$m32,
	"setup" => \$setup,
	"cmd=s" => \$cmd,
	"verbose" => \$verbose,
	"timeout=i" => \$timeout,
	"json_filter=s" => \$json_filter
) or die("Error in argument parsing!\n");

if ($help) {
	print("Options\n-------\n\n");
	print("--help               : Prints this help\n\n");
	print("--logname=name       : Name for all generated logs\n\n");
	print("--sysinfo            : Print system information\n\n");
	print("--list               : List test groups\n\n");
	print("--verbose            : Enables verbose mode\n\n");
	print("--run=testgroup      : Execute group of tests (e.g mm, fs, openposix, or syzkaller)\n\n");
	print("--interactive        : Print command to start interactive session with SUT\n\n");
	print("--include=regex      : Include tests from test group which match regex\n\n");
	print("--exclude=regex      : Exclude tests from test group which match regex\n\n");
	print("--ltpdir=path        : Directroy where LTP is, or will be, installed (default /opt/ltp)\n\n");
	print("--install=hash/tag   : Checkout LTP from git, compile it and install\n\n");
	print("--repouri=path       : Location of the LTP git repo\n\n");
	print("--m32                : Build 32bit binaries on 64bit architecture\n\n");
	print("--setup              : Attempts to set up the machine (installs packages)\n\n");
	print("--cmd=cmd            : Execute command\n\n");
	print("--timeout=seconds    : The number of seconds to wait for an action to complete (default 300)\n\n");
	print("--json_filter=filter : Specify a filter to apply on the json logs\n\n");
	print("Backend help\n------------\n\n");
	print("--backend=sh|...[:param=val]...\n\n");
	backend::help();
	exit(0);
}

log::set_verbosity(1) if ($verbose);

my $backend = backend::new($backend_opts);

sub stop_exit($)
{
	backend::stop($backend, $timeout);
	exit(shift);
}

if ($sysinfo || $list) {
	backend::start($backend);
	if ($sysinfo) {
		$sysinfo = utils::collect_sysinfo($backend);
		utils::print_sysinfo($sysinfo);
	}
	utils::list_testgroups($backend, $ltpdir) if ($list);
	stop_exit(0);
}

if ($interactive) {
	backend::interactive($backend);
	exit(0);
}

backend::set_logfile($backend, "$logname.raw");
backend::start($backend);

if ($setup && install_pkg::install_ltp_pkgs($backend, $m32 || $run =~ "syzkaller")) {
	stop_exit(0);
}

if ($cmd) {
	my @result = backend::run_cmd($backend, $cmd);
	print("$_\n") for (@result);
}

if ($install && utils::install_ltp($backend, $ltpdir, $install, $m32, $run, $repouri)) {
	stop_exit(0);
}

if (!backend::run_cmd($backend, "! [ -e $ltpdir ]", $timeout)) {
	print("LTP dir '$ltpdir' doesn't exist\n");
	stop_exit(0);
}

if ($run) {
	my %results;
	$results{'sysinfo'} = utils::collect_sysinfo($backend);
	my ($stats, $test_results) =
		utils::run_ltp($backend, $ltpdir, $run, $timeout,
		$include, $exclude);
	$results{'tests'} = {'stats' => $stats, 'results' => $test_results};
	results::writelog(results::json_filter($json_filter, \%results), "$logname.json");
	results::writelog_html(\%results, "$logname.html");
}

backend::stop($backend, $timeout);
